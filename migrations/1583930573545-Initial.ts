import {MigrationInterface, QueryRunner} from "typeorm";

export class Initial1583930573545 implements MigrationInterface {
    name = 'Initial1583930573545'

    public async up(queryRunner: QueryRunner): Promise<void> {
        const { options } = queryRunner.connection;
        if (options.type !== "postgres") {
            throw new Error("Require PostgreSQL database");
        }

        const schema = options.schema ?? "backend-default";
        
        await queryRunner.query(`CREATE TABLE "${schema}"."access_bearer_token" ("id" integer NOT NULL GENERATED BY DEFAULT AS IDENTITY, "token" text NOT NULL, CONSTRAINT "access_bearer_token_pkey" PRIMARY KEY ("id"))`, undefined);
        await queryRunner.query(`CREATE TABLE "${schema}"."user" ("id" integer NOT NULL, "name" text, "walletAddress" text NOT NULL, "telegramUid" bigint, CONSTRAINT "user_pkey" PRIMARY KEY ("id"))`, undefined);
        await queryRunner.query(`CREATE UNIQUE INDEX "user_telegramUid_idx" ON "${schema}"."user" ("telegramUid") `, undefined);
        await queryRunner.query(`CREATE TABLE "${schema}"."token" ("id" integer NOT NULL, "name" text, "contractAddress" text NOT NULL, "symbol" text NOT NULL, "issuerUserId" integer, CONSTRAINT "token_pkey" PRIMARY KEY ("id"))`, undefined);
        await queryRunner.query(`CREATE UNIQUE INDEX "token_symbol_idx" ON "${schema}"."token" ("symbol") `, undefined);
        await queryRunner.query(`ALTER TABLE "${schema}"."token" ADD CONSTRAINT "token_issuerUserId_fkey" FOREIGN KEY ("issuerUserId") REFERENCES "${schema}"."user"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`, undefined);
    }

    public async down(queryRunner: QueryRunner): Promise<void> {
        const { options } = queryRunner.connection;
        if (options.type !== "postgres") {
            throw new Error("Require PostgreSQL database");
        }

        const schema = options.schema ?? "backend-default";
        
        await queryRunner.query(`ALTER TABLE "${schema}"."token" DROP CONSTRAINT "token_issuerUserId_fkey"`, undefined);
        await queryRunner.query(`DROP INDEX "${schema}"."token_symbol_idx"`, undefined);
        await queryRunner.query(`DROP TABLE "${schema}"."token"`, undefined);
        await queryRunner.query(`DROP INDEX "${schema}"."user_telegramUid_idx"`, undefined);
        await queryRunner.query(`DROP TABLE "${schema}"."user"`, undefined);
        await queryRunner.query(`DROP TABLE "${schema}"."access_bearer_token"`, undefined);
    }

}
